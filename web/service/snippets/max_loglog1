#mode cCRCW

input int A[_];
int n = A.size;
output int max;

int max_const(int A[_]) {
  int n = A.size;
  int max;
  pardo(i : n) {
    int lmax = 1;
    pardo(j : n) if (A[j] > A[i] || (A[j] == A[i] && j > i)) lmax = 0;
    if (lmax) max = i;
  }
  return A[max];
}

int max_sqrt(int A[_]) {
  int n = A.size;
  if (n < 9) return max_const(A);
  int sn = sqrt(n);
  int B[sn];

  pardo(i : sn) {
    int AA[sn];
    pardo(j : sn) AA[j] = 0;
    pardo(j : sn) if (i * sn + j < n) AA[j] = A[i * sn + j];
    B[i] = max_sqrt(AA);
  }
  return max_const(B);
}

max = max_sqrt(A);
