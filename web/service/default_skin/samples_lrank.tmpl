<% c++ #include "../content.h" %>  
<% skin default_skin %>  
<% view samples_lrank uses content::samples_lrank extends samples %>  

<% template stuff() %>
  <p class="subtitle is-3 section-title">List ranking</p>
  <p class="has-text-justified">
  
  <article class="message is-warning">
  <div class="message-body">
  Given is an array <code>S</code> that represents the successors in a linked list:
  a list <code>2 -&gt; 3 -&gt; 0 -&gt; 4 -&gt; 5 -&gt; 1</code> is represented by an
  array
  <table class="table table is-narrow">
  <tbody>
  <tr><th><code>i</code></th>
  <td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr>
  <tr><th><code>S[i]</code></th>
  <td>4</td><td>1</td><td>3</td><td>0</td><td>5</td><td>1</td></tr>
  </tbody>
  </table>
  The task is to compute, for each element in the list, its distance from the end of the
  list, i.e. to produce an array <code>R</code>:
  <table class="table table is-narrow">
  <tbody>
  <tr><th><code>i</code></th>
  <td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr>
  <tr><th><code>R[i]</code></th>
  <td>3</td><td>0</td><td>5</td><td>4</td><td>2</td><td>1</td></tr>
  </tbody>
  </table>
  </div>
</article>

  </p><p class="has-text-justified" style="padding-top:5px">
  A simple technique called <i>pointer jumping</i> works as follows:
<pre class="codepre" data-id="lrank_pj"><code class="wt">input int S[_];
int n = S.size;

output int R[n];

pardo(i : n) {
  R[i] = 1;
  if (S[i] == i) R[i] = 0;
}

for (int t = 0; 2 ^ t < n; t++)
    pardo(i : n) {
        R[i] += R[S[i]];
        S[i] = S[S[i]];
    }
</code></pre>

Time is logarithmic, but the work is of the order <i>O(n log n)</i>.


<% end %>

<% end view %>  
<% end skin %>  
