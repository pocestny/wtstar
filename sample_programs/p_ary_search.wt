/*
  input: - a strictly increasing array A of integers
         - number y
         - a parameter p

  output: the position of y in A or -1
*/

input int A[_], y, p;
output int result;

int n=A.size;

int B[n+2];

int search(int l, int r) {
  int n = r - l +1;
  int result=-1;

  if (p>=n) {
    pardo(i:n) if (B[l+i]==y) result=l+i;
    return result;
  }
  int q=n/(p+1);
  int bucket = -1;
  pardo(i:p) {
    int mypos = l+(i+1)*q-1;
    if (B[mypos]==y) result=mypos;
    else if (B[mypos]>y && B[mypos-q]<y) bucket=mypos;
  }
  if (result!=-1) return result;
  if (bucket==-1) 
    return search(l+p*q,r);
  else
    return search(bucket-q+1,bucket);
}

if (y>A[n-1]) result=-1;
else if (y==A[n-1]) result=n-1;
else {
  B[0]=-99999;
  B[n+1]=99999;
  pardo(i:n) B[i+1]=A[i];

result = search(1,n);
if (result>0) result--;
}
