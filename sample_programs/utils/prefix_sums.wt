#include "sum.wt"

// nonrecursive prefix sums 
// T = O(log n)
// W = O(n)
// [ additional O(n log n) memory ]
void prefix_sums(int A[_], int S[_]) {
  int n = 2^log(A.size), ln=log(n);

  int B[ln+1, n];  // storage

  // copy input
  pardo(i : n) B[0, i] = 0;
  pardo(i : A.size) B[0,i] = A[i];

  // bottom-up traversal
  for (int t = 0; 2 ^ t < n; t++)
    pardo(i : n / 2 ^ (t + 1)) B[t + 1, i] = B[t, 2 * i] + B[t, 2 * i + 1];

  // top-down traversal
  for (int t = 0; 2 ^ t < n; t++) pardo(i : n / 2 ^ (ln - t)) {
      B[ln - t - 1, 2 * i] = B[ln - t, i] - B[ln - t - 1, 2 * i + 1];
      B[ln - t - 1, 2 * i + 1] = B[ln - t, i];
    }

  // write output
  pardo(i : A.size) S[i] = B[0, i];
}

