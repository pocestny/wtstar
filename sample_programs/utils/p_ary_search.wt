/*
  input: - a strictly increasing array A of integers
         - number y
         - a parameter p

  output: the position of y in A or -1
*/

int _search_internal(int B[_], int l, int r, int y, int p) {
  int n = r - l + 1;
  int result = -1;

  if (p >= n) {
    pardo(i : n) if (B[l + i] == y) result = l + i;
    return result;
  }
  int q = n / (p + 1);
  int bucket = -1;
  pardo(i : p) {
    int mypos = l + (i + 1) * q - 1;
    if (B[mypos] == y)
      result = mypos;
    else if (B[mypos] > y && B[mypos - q] < y)
      bucket = mypos;
  }
  if (result != -1) return result;
  if (bucket == -1)
    return _search_internal(l + p * q, r);
  else
    return _search_internal(bucket - q + 1, bucket);
}

int p_ary_search(int A[_], int y, int p) {
  int n = A.size;
  int B[n + 2];

  if (y > A[n - 1])
    return  -1;
  else if (y == A[n - 1])
    return = n - 1;
  else {
    B[0] = -99999;
    B[n + 1] = 99999;
    pardo(i : n) B[i + 1] = A[i];

    int result = _search_internal(B,1, n,y,p);
    if (result > 0) result--;
    return result;
  }
}
