/*
    list ranking using pointer jumping

    input: array of successors encoding a list
       2 -> 3 -> 0 -> 4 -> 5 -> 1

       i: 0  1  2  3  4  5
    S[i]: 4  1  3  0  5  1

    output: array of distances from end

    R[i]: 3  0  5  4  2  1

    T = O (log n)
    W = O (n log n)

*/

input int S[_];
int n = S.size;

output int R[n];

pardo(i : n) {
  R[i] = 1;
  if (S[i] == i) R[i] = 0;
}

for (int t = 0; 2 ^ t < n; t++) 
    pardo(i : n) {
        R[i] += R[S[i]];
        S[i] = S[S[i]];
    }
